[
    {
        "question": "Что такое Python?",
        "options": [
            "Язык программирования высокого уровня",
            "Название змеи",
            "Марка автомобиля",
            "Операционная система"
        ],
        "correct": 0
    },
    {
        "question": "В каком году написана первая статья про Python?",
        "options": [
            "1989",
            "1991",
            "2000",
            "1995"
        ],
        "correct": 1
    },
    {
        "question": "Какие типы данных есть в Python?",
        "options": [
            "int, float, complex, str, list, tuple, dict, set, bool",
            "Только числа и строки",
            "Все типы объектов",
            "Базовые типы как в C++"
        ],
        "correct": 0
    },
    {
        "question": "Что такое лямбда-функция? Какое у нее назначение?",
        "options": [
            "Функция, определяемая с помощью ключевого слова def",
            "Анонимная функция, определяемая с помощью ключевого слова lambda",
            "Функция, которая не принимает аргументы",
            "Функция, которая всегда возвращает None"
        ],
        "correct": 1
    },
    {
        "question": "Что такое PEP 8?",
        "options": [
            "Документ, описывающий стандартные библиотеки Python",
            "Документ, содержащий рекомендации по написанию кода на Python",
            "Документ, описывающий синтаксис языка Python",
            "Документ, содержащий примеры кода на Python"
        ],
        "correct": 1
    },
    {
        "question": "Как получить документацию по атрибутам объекта?",
        "options": [
            "Использовать атрибут __doc__",
            "Использовать функцию help()",
            "Использовать функцию dir()",
            "Использовать функцию type()"
        ],
        "correct": 0
    },
    {
        "question": "Что такое docstring?",
        "options": [
            "Строка, описывающая, что делает функция, метод, модуль или класс",
            "Строка, содержащая имя функции",
            "Строка, содержащая тип возвращаемого значения",
            "Строка, описывающая параметры функции"
        ],
        "correct": 0
    },
    {
        "question": "В чем разница между типами list и tuple?",
        "options": [
            "Список изменяемый, а кортеж неизменяемый",
            "Список неизменяемый, а кортеж изменяемый",
            "Список может содержать только числа, а кортеж - любые объекты",
            "Список и кортеж - это одно и то же"
        ],
        "correct": 0
    },
    {
        "question": "Может ли быть индекс списка отрицательным?",
        "options": [
            "Нет, индексы всегда положительные",
            "Да, отрицательные индексы считаются от конца списка",
            "Да, но только для кортежей",
            "Нет, это вызовет ошибку"
        ],
        "correct": 1
    },
    {
        "question": "Что значит конструкция pass?",
        "options": [
            "Оператор, который выполняет действие",
            "Пустой оператор, который ничего не делает",
            "Оператор, который вызывает ошибку",
            "Оператор, который завершает выполнение программы"
        ],
        "correct": 1
    },
    {
        "question": "Чем отличаются многопоточное и многопроцессорное приложение?",
        "options": [
            "Многопоточные приложения используют несколько процессов, а многопроцессорные - несколько потоков.",
            "Многопоточные приложения используют общие ресурсы, а многопроцессорные - отдельные.",
            "Многопроцессорные приложения всегда быстрее, чем многопоточные.",
            "Многопоточные приложения не могут использовать многопроцессорность."
        ],
        "correct": 1
    },
    {
        "question": "Как просмотреть методы объекта?",
        "options": [
            "Использовать функцию list()",
            "Использовать функцию dir()",
            "Использовать функцию type()",
            "Использовать функцию help()"
        ],
        "correct": 1
    },
    {
        "question": "Что такое *args и **kwargs в определении функции?",
        "options": [
            "*args используется для передачи именованных аргументов, а **kwargs - для позиционных.",
            "*args и **kwargs - это специальные параметры для передачи переменного количества аргументов.",
            "*args используется для передачи одного аргумента, а **kwargs - для нескольких.",
            "*args и **kwargs - это параметры, которые нельзя использовать в одной функции."
        ],
        "correct": 1
    },
    {
        "question": "Python полностью поддерживает ООП?",
        "options": [
            "Да, Python поддерживает все основные принципы ООП.",
            "Нет, Python не поддерживает наследование.",
            "Да, но только частично.",
            "Нет, Python не является объектно-ориентированным языком."
        ],
        "correct": 0
    },
    {
        "question": "Что такое globals() и locals()?",
        "options": [
            "Функции, которые возвращают список всех переменных в программе.",
            "Функции, которые возвращают словари глобальных и локальных переменных.",
            "Функции, которые возвращают только глобальные переменные.",
            "Функции, которые возвращают только локальные переменные."
        ],
        "correct": 1
    },
    {
        "question": "Что хранится в атрибуте dict?",
        "options": [
            "Список всех методов объекта.",
            "Словарь, который хранит атрибуты объекта в виде пар ключ-значение.",
            "Список всех глобальных переменных.",
            "Словарь, который хранит только локальные переменные."
        ],
        "correct": 1
    },
    
        {
            "question": "Как проверить файл .py на синтаксические ошибки, не запуская его?",
            "options": [
                "Использовать команду python -m py_compile yourfile.py",
                "Использовать команду python check_syntax yourfile.py",
                "Использовать команду python -m syntax_check yourfile.py",
                "Использовать команду python validate yourfile.py"
            ],
            "correct": 0
        },
        {
            "question": "Зачем в Python используется ключевое слово self?",
            "options": [
                "Для обращения к атрибутам и методам класса внутри его методов.",
                "Для создания статических методов.",
                "Для определения глобальных переменных.",
                "Для создания экземпляров класса."
            ],
            "correct": 0
        },
        {
            "question": "Что такое декоратор? Как написать собственный?",
            "options": [
                "Функция, которая изменяет поведение другой функции.",
                "Класс, который управляет функциями.",
                "Модуль, который импортирует другие модули.",
                "Функция, которая не принимает аргументы."
            ],
            "correct": 0
        },
        {
            "question": "Что может быть ключом в словаре?",
            "options": [
                "Любой изменяемый объект.",
                "Только строки.",
                "Только числа.",
                "Любой неизменяемый объект."
            ],
            "correct": 3
        },
        {
            "question": "В чем разница между пакетами и модулями?",
            "options": [
                "Модуль - это файл, а пакет - это директория.",
                "Пакет - это файл, а модуль - это директория.",
                "Модули могут содержать только функции, а пакеты - классы.",
                "Пакеты не могут содержать модули."
            ],
            "correct": 0
        },
        {
            "question": "Как перевести строку, содержащую двоичный код (1 и 0), в число?",
            "options": [
                "Использовать функцию bin()",
                "Использовать функцию int() с основанием 2.",
                "Использовать функцию str()",
                "Использовать функцию float()"
            ],
            "correct": 1
        },
        {
            "question": "Для чего используется функция __init__?",
            "options": [
                "Для создания экземпляров класса.",
                "Для инициализации атрибутов объекта.",
                "Для определения методов класса.",
                "Для завершения работы программы."
            ],
            "correct": 1
        },
        {
            "question": "Как проверить файл .py на синтаксические ошибки, не запуская его?",
            "options": [
                "Использовать команду python -m py_compile yourfile.py",
                "Использовать команду python check_syntax yourfile.py",
                "Использовать команду python -m syntax_check yourfile.py",
                "Использовать команду python validate yourfile.py"
            ],
            "correct": 0
        },
        {
            "question": "Зачем в Python используется ключевое слово self?",
            "options": [
                "Для обращения к атрибутам и методам класса внутри его методов.",
                "Для создания статических методов.",
                "Для определения глобальных переменных.",
                "Для создания экземпляров класса."
            ],
            "correct": 0
        },
        {
            "question": "Что такое декоратор? Как написать собственный?",
            "options": [
                "Функция, которая изменяет поведение другой функции.",
                "Класс, который управляет функциями.",
                "Модуль, который импортирует другие модули.",
                "Функция, которая не принимает аргументы."
            ],
            "correct": 0
        },
        {
            "question": "Что может быть ключом в словаре?",
            "options": [
                "Любой изменяемый объект.",
                "Только строки.",
                "Только числа.",
                "Любой неизменяемый объект."
            ],
            "correct": 3
        },
        {
            "question": "В чем разница между пакетами и модулями?",
            "options": [
                "Модуль - это файл, а пакет - это директория.",
                "Пакет - это файл, а модуль - это директория.",
                "Модули могут содержать только функции, а пакеты - классы.",
                "Пакеты не могут содержать модули."
            ],
            "correct": 0
        },
        {
            "question": "Как перевести строку, содержащую двоичный код (1 и 0), в число?",
            "options": [
                "Использовать функцию bin()",
                "Использовать функцию int() с основанием 2.",
                "Использовать функцию str()",
                "Использовать функцию float()"
            ],
            "correct": 1
        },
        {
            "question": "Для чего используется функция __init__?",
            "options": [
                "Для создания экземпляров класса.",
                "Для инициализации атрибутов объекта.",
                "Для определения методов класса.",
                "Для завершения работы программы."
            ],
            "correct": 1
        },
        {
            "question": "Для чего используется ключевое слово yield?",
            "options": [
                "Для создания функций, которые возвращают одно значение.",
                "Для создания генераторов, которые возвращают последовательность значений.",
                "Для завершения выполнения функции.",
                "Для определения глобальных переменных."
            ],
            "correct": 1
        },
        {
            "question": "Чем отличаются iter и next?",
            "options": [
                "iter создает итератор, а next возвращает следующий элемент.",
                "iter возвращает следующий элемент, а next создает итератор.",
                "Оба метода выполняют одно и то же.",
                "iter используется только для списков, а next - для кортежей."
            ],
            "correct": 0
        },
        {
            "question": "Что такое контекстный менеджер?",
            "options": [
                "Объект, который управляет ресурсами с помощью методов enter() и exit().",
                "Функция, которая возвращает объект.",
                "Класс, который не имеет методов.",
                "Переменная, которая хранит состояние программы."
            ],
            "correct": 0
        },
        {
            "question": "Как сделать python-скрипт исполняемым в различных операционных системах?",
            "options": [
                "Использовать утилиту PyInstaller.",
                "Использовать команду python make_executable myscript.py.",
                "Использовать команду chmod для изменения прав доступа.",
                "Использовать утилиту pip."
            ],
            "correct": 0
        },
        {
            "question": "Как сделать копию объекта? Как сделать глубокую копию объекта?",
            "options": [
                "Использовать метод copy() для поверхностной копии и deepcopy() для глубокой копии.",
                "Использовать метод clone() для поверхностной копии и copy() для глубокой копии.",
                "Использовать метод shallow() для поверхностной копии и deep() для глубокой копии.",
                "Использовать метод duplicate() для поверхностной копии и copy() для глубокой копии."
            ],
            "correct": 0
        },
        {
            "question": "Опишите принцип работы сборщика мусора в Python.",
            "options": [
                "Сборщик мусора управляет памятью, удаляя объекты, на которые больше нет ссылок.",
                "Сборщик мусора освобождает память только при завершении программы.",
                "Сборщик мусора работает только с глобальными переменными.",
                "Сборщик мусора не используется в Python."
            ],
            "correct": 0
        },
        {
            "question": "Как использовать глобальные переменные? Это хорошая идея?",
            "options": [
                "Глобальные переменные объявляются за пределами функций и классов, но их использование не всегда рекомендуется.",
                "Глобальные переменные нельзя использовать в функциях.",
                "Глобальные переменные всегда являются хорошей практикой.",
                "Глобальные переменные могут быть использованы только в одном модуле."
            ],
            "correct": 0
        },
        {
            "question": "Для чего в классе используется атрибут slots?",
            "options": [
                "Для оптимизации памяти и ускорения работы с объектами класса.",
                "Для создания статических методов.",
                "Для определения глобальных переменных.",
                "Для создания экземпляров класса."
            ],
            "correct": 0
        },
        {
            "question": "Какие пространства имен существуют в Python?",
            "options": [
                "builtins, main, globals, locals.",
                "global, local, builtins.",
                "main, globals, locals.",
                "local, global, module."
            ],
            "correct": 0
        },
        {
            "question": "Как реализуется управление памятью в Python?",
            "options": [
                "С помощью ручного управления памятью.",
                "С помощью механизма сборки мусора.",
                "С помощью статического выделения памяти.",
                "С помощью динамического выделения памяти."
            ],
            "correct": 1
        },
        {
            "question": "Что такое метаклассы и в каких случаях их следует использовать?",
            "options": [
                "Классы, которые определяют поведение других классов.",
                "Классы, которые не имеют методов.",
                "Классы, которые могут быть созданы только динамически.",
                "Классы, которые не могут наследовать другие классы."
            ],
            "correct": 0
        },
        {
            "question": "Зачем нужен pdb?",
            "options": [
                "Для создания графического интерфейса.",
                "Для отладки кода Python.",
                "Для управления памятью.",
                "Для работы с базами данных."
            ],
            "correct": 1
        },
        {
            "question": "Каким будет результат следующего выражения: [0, 1][10:]?",
            "options": [
                "Ошибка IndexError.",
                "Список [0, 1].",
                "Пустой список [].",
                "Список [1]."
            ],
            "correct": 2
        },
        {
            "question": "Как создать класс без слова class?",
            "options": [
                "Используя функцию type().",
                "Используя функцию create_class().",
                "Используя метаклассы.",
                "Невозможно создать класс без ключевого слова class."
            ],
            "correct": 0
        },
        {
            "question": "Как перезагрузить импортированный модуль?",
            "options": [
                "Использовать функцию reload() из модуля importlib.",
                "Использовать команду import module_name.",
                "Использовать команду refresh(module_name).",
                "Использовать команду reset(module_name)."
            ],
            "correct": 0
        },
        {
            "question": "Напишите декоратор, который будет перехватывать ошибки и повторять функцию максимум N раз.",
            "options": [
                "Декоратор, который игнорирует ошибки.",
                "Декоратор, который завершает программу при ошибке.",
                "Декоратор, который перехватывает ошибки и повторяет функцию.",
                "Декоратор, который всегда возвращает None."
            ],
            "correct": 2
        },
        {
            "question": "Каким будет результат следующего выражения: len(' '.join(list(map(str, [[0], [1]]))))?",
            "options": [
                "2.",
                "3.",
                "4.",
                "5."
            ],
            "correct": 1
        },
        {
            "question": "Python — легкий язык. Согласны?",
            "options": [
                "Да, Python всегда легкий.",
                "Нет, Python имеет сложные аспекты.",
                "Да, но только для новичков.",
                "Нет, Python не легкий."
            ],
            "correct": 1
        },
        {
            "question": "Какие проблемы есть в Python?",
            "options": [
                "Отсутствие поддержки многопоточности.",
                "Глобальная блокировка интерпретатора (GIL).",
                "Отсутствие библиотек.",
                "Сложность синтаксиса."
            ],
            "correct": 1
        },
        {
            "question": "Когда будет выполнена ветка else в конструкции try...except...else?",
            "options": [
                "Всегда, когда блок try выполнен.",
                "Только если в блоке try не было исключений.",
                "Никогда.",
                "Только если блок except не указан."
            ],
            "correct": 1
        },
        {
            "question": "Поддерживает ли Python множественное наследование?",
            "options": [
                "Да, поддерживает.",
                "Нет, не поддерживает.",
                "Только в некоторых версиях.",
                "Поддерживает только в классах."
            ],
            "correct": 0
        },
        {
            "question": "Как dict и set реализованы внутри? Какова сложность получения элемента?",
            "options": [
                "Они реализованы как списки.",
                "Они реализованы как хэш-таблицы.",
                "Они реализованы как деревья.",
                "Они реализованы как массивы."
            ],
            "correct": 1
        },
        {
            "question": "Что такое MRO? Как это работает?",
            "options": [
                "Порядок разрешения методов в Python.",
                "Метод для создания классов.",
                "Функция для работы с памятью.",
                "Алгоритм для сортировки."
            ],
            "correct": 0
        },
      

[
    {
        "question": "Как аргументы передаются в функции: по значению или по ссылке?",
        "options": [
            "По значению.",
            "По ссылке на объект.",
            "По значению и по ссылке.",
            "По ссылке на значение."
        ],
        "correct": 1
    },
    {
        "question": "С помощью каких инструментов можно выполнить статический анализ кода?",
        "options": [
            "Pylint, Flake8, Mypy, Bandit.",
            "Git, Docker, Vagrant.",
            "PyInstaller, cx_Freeze.",
            "Jupyter, Spyder."
        ],
        "correct": 0
    },
    {
        "question": "Что будет напечатано в результате выполнения следующего кода: import sys; arr_1 = []; arr_2 = arr_1; print(sys.getrefcount(arr_1))?",
        "options": [
            "1.",
            "2.",
            "3.",
            "Ошибка."
        ],
        "correct": 1
    },
    {
        "question": "Что такое GIL?",
        "options": [
            "Global Interpreter Lock, механизм, который позволяет только одному потоку выполнять байт-код Python.",
            "Глобальная библиотека для интерпретации кода.",
            "Глобальный интерфейс для работы с библиотеками.",
            "Глобальная интеграция языка."
        ],
        "correct": 0
    },
    {
        "question": "Опишите процесс компиляции в Python.",
        "options": [
            "Python компилирует код в машинный код перед выполнением.",
            "Python интерпретирует код без компиляции.",
            "Python компилирует код в байт-код, который затем выполняется виртуальной машиной.",
            "Python использует статическую компиляцию."
        ],
        "correct": 2
    },
    {
        "question": "Как тиражировать Python код?",
        "options": [
            "Использовать системы контроля версий и виртуальные машины.",
            "Использовать только Git.",
            "Использовать только Docker.",
            "Использовать только pip."
        ],
        "correct": 0
    },
    {
        "question": "Что такое дескрипторы?",
        "options": [
            "Объекты, которые определяют, как другие объекты должны вести себя при доступе к атрибуту.",
            "Функции, которые изменяют поведение других функций.",
            "Классы, которые не имеют методов.",
            "Переменные, которые хранят состояние программы."
        ],
        "correct": 0
    },
    {
        "question": "Почему всякий раз, когда Python завершает работу, не освобождается вся память?",
        "options": [
            "Потому что Python не использует автоматическое управление памятью.",
            "Потому что остаются ссылки на объекты.",
            "Потому что Python не может освободить память.",
            "Потому что память освобождается только при завершении программы."
        ],
        "correct": 1
    },
    {
        "question": "Что будет напечатано в результате выполнения следующего кода?",
        "options": [
            "var_2 GET val_2; var_1 GET val_1; var_2 SET val_1; var_1 SET val_2.",
            "var_1 GET val_1; var_2 GET val_2; var_1 SET val_2; var_2 SET val_1.",
            "Ошибка.",
            "Ничего не будет напечатано."
        ],
        "correct": 0
    },
    {
        "question": "Что такое интернирование строк?",
        "options": [
            "Процесс, при котором строки с одинаковым значением ссылаются на один и тот же объект в памяти.",
            "Процесс, при котором строки автоматически конвертируются в числа.",
            "Процесс, при котором строки хранятся в виде массивов.",
            "Процесс, при котором строки сжимаются для экономии памяти."
        ],
        "correct": 0
    },
    {
        "question": "Как упаковать бинарные зависимости?",
        "options": [
            "Использовать менеджеры пакетов, такие как pip и conda.",
            "Использовать только pip.",
            "Использовать только conda.",
            "Использовать только Docker."
        ],
        "correct": 0
    },
    {
        "question": "Почему в Python нет оптимизации хвостовой рекурсии?",
        "options": [
            "Потому что это не нужно.",
            "Потому что это может привести к переполнению стека вызовов.",
            "Потому что Python не поддерживает рекурсию.",
            "Потому что это слишком сложно реализовать."
        ],
        "correct": 1
    },
    {
        "question": "Что такое wheels и eggs? В чем разница?",
        "options": [
            "Egg - это старый формат дистрибуции, а wheel - новый.",
            "Оба формата одинаковы.",
            "Wheel - это формат для Java, а egg - для Python.",
            "Egg - это формат для C, а wheel - для Python."
        ],
        "correct": 0
    },
    {
        "question": "Как получить доступ к модулю, написанному на Python из C и наоборот?",
        "options": [
            "Использовать Python/C API для вызова Python функций из C.",
            "Использовать только C.",
            "Использовать только Python.",
            "Использовать Java."
        ],
        "correct": 0
    },
    {
        "question": "Как ускорить существующий код Python?",
        "options": [
            "Использовать векторизацию, правильные структуры данных и многопоточность.",
            "Использовать только многопоточность.",
            "Использовать только векторизацию.",
            "Ускорить код невозможно."
        ],
        "correct": 0
    },
    {
        "question": "Что такое pycache? Что такое файлы .pyc?",
        "options": [
            "pycache - это каталог для хранения скомпилированных файлов .pyc, которые ускоряют импорт модулей.",
            "pycache - это временные файлы, которые удаляются после завершения работы программы.",
            "pycache - это каталог для хранения исходных файлов Python.",
            "pycache - это каталог для хранения логов выполнения программы."
        ],
        "correct": 0
    },
    {
        "question": "Что такое виртуальное окружение?",
        "options": [
            "Механизм для создания изолированных окружений для установки пакетов Python.",
            "Инструмент для управления версиями Python.",
            "Способ компиляции Python кода.",
            "Метод оптимизации кода."
        ],
        "correct": 0
    },
    {
        "question": "Python — это императивный или декларативный язык?",
        "options": [
            "Императивный язык.",
            "Декларативный язык.",
            "Смешанный язык.",
            "Функциональный язык."
        ],
        "correct": 0
    },
    {
        "question": "Что такое менеджер пакетов?",
        "options": [
            "Инструмент для управления установкой, обновлением и удалением библиотек и зависимостей.",
            "Инструмент для компиляции кода.",
            "Инструмент для отладки кода.",
            "Инструмент для тестирования кода."
        ],
        "correct": 0
    },
    {
        "question": "Какие менеджеры пакетов вы знаете?",
        "options": [
            "pip, conda, easy_install, poetry.",
            "npm, yarn, gem.",
            "apt, brew, chocolatey.",
            "maven, gradle."
        ],
        "correct": 0
    },
    {
        "question": "В чем преимущества массивов NumPy по сравнению с (вложенными) списками Python?",
        "options": [
            "NumPy использует более оптимизированную память и имеет более эффективные методы работы с массивами.",
            "Списки Python быстрее, чем массивы NumPy.",
            "NumPy не поддерживает многомерные массивы.",
            "Списки Python имеют больше встроенных функций."
        ],
        "correct": 0
    },
    {
        "question": "Как реализовать функцию, которая должна использовать статическую переменную?",
        "options": [
            "Использовать глобальную переменную.",
            "Использовать замыкание.",
            "Использовать класс.",
            "Использовать аргументы функции."
        ],
        "correct": 1
    },
    {
        "question": "Какой метод используется для создания виртуального окружения в Python?",
        "options": [
            "python -m venv myenv.",
            "python create venv myenv.",
            "python make venv myenv.",
            "python setup venv myenv."
        ],
        "correct": 0
    },
    {
        "question": "Что происходит, когда вы импортируете модуль в Python?",
        "options": [
            "Модуль компилируется в байт-код и сохраняется в pycache.",
            "Модуль загружается в память без компиляции.",
            "Модуль автоматически запускается.",
            "Модуль игнорируется."
        ],
        "correct": 0
    },
    {
        "question": "Какой инструмент используется для автоматического форматирования кода Python?",
        "options": [
            "Pylint.",
            "Black.",
            "Flake8.",
            "Mypy."
        ],
        "correct": 1
    },
    {
        "question": "Что такое интернирование строк?",
        "options": [
            "Процесс, при котором строки с одинаковым значением ссылаются на один и тот же объект в памяти.",
            "Процесс, при котором строки автоматически конвертируются в числа.",
            "Процесс, при котором строки хранятся в виде массивов.",
            "Процесс, при котором строки сжимаются для экономии памяти."
        ],
        "correct": 0
    },
    {
        "question": "Как упаковать бинарные зависимости?",
        "options": [
            "Использовать менеджеры пакетов, такие как pip и conda.",
            "Использовать только pip.",
            "Использовать только conda.",
            "Использовать только Docker."
        ],
        "correct": 0
    },
    {
        "question": "Почему в Python нет оптимизации хвостовой рекурсии?",
        "options": [
            "Потому что это не нужно.",
            "Потому что это может привести к переполнению стека вызовов.",
            "Потому что Python не поддерживает рекурсию.",
            "Потому что это слишком сложно реализовать."
        ],
        "correct": 1
    },
    {
        "question": "Что такое wheels и eggs? В чем разница?",
        "options": [
            "Egg - это старый формат дистрибуции, а wheel - новый.",
            "Оба формата одинаковы.",
            "Wheel - это формат для Java, а egg - для Python.",
            "Egg - это формат для C, а wheel - для Python."
        ],
        "correct": 0
    },
    {
        "question": "Как получить доступ к модулю, написанному на Python из C и наоборот?",
        "options": [
            "Использовать Python/C API для вызова Python функций из C.",
            "Использовать только C.",
            "Использовать только Python.",
            "Использовать Java."
        ],
        "correct": 0
    },
    {
        "question": "Как ускорить существующий код Python?",
        "options": [
            "Использовать векторизацию, правильные структуры данных и многопоточность.",
            "Использовать только многопоточность.",
            "Использовать только векторизацию.",
            "Ускорить код невозможно."
        ],
        "correct": 0
    },
    {
        "question": "Что будет напечатано в результате выполнения следующего кода? def f_g(): yield 43 return 66 print(f_g())",
        "options": [
            "43",
            "66",
            "generator object",
            "Ошибка"
        ],
        "correct": 2
    },
    {
        "question": "Как имплементировать словарь с нуля?",
        "options": [
            "Использовать хэш-таблицу.",
            "Использовать списки.",
            "Использовать только классы.",
            "Использовать массивы."
        ],
        "correct": 0
    },
    {
        "question": "Напишите однострочник, который будет подсчитывать количество заглавных букв в файле.",
        "options": [
            "num_uppercase = sum(1 for line in open('filename.txt') for character in line if character.isupper())",
            "num_uppercase = len([c for c in open('filename.txt') if c.isupper()])",
            "num_uppercase = count('A', 'B', 'C')",
            "num_uppercase = sum(1 for line in open('filename.txt') if line.isupper())"
        ],
        "correct": 0
    },
    {
        "question": "Что такое файлы .pth?",
        "options": [
            "Файлы, которые добавляют директории в путь поиска модулей Python.",
            "Файлы, которые содержат скомпилированный код.",
            "Файлы, которые используются для хранения данных.",
            "Файлы, которые не имеют значения."
        ],
        "correct": 0
    },
    {
        "question": "Какие функции из collections и itertools вы используете?",
        "options": [
            "defaultdict, Counter, namedtuple, itertools.chain.",
            "list, dict, set.",
            "map, filter, reduce.",
            "str, int, float."
        ],
        "correct": 0
    },
    {
        "question": "Что делает флаг PYTHONOPTIMIZE?",
        "options": [
            "Удаляет отладочную информацию и отключает assert.",
            "Увеличивает производительность кода.",
            "Уменьшает размер файлов.",
            "Оптимизирует память."
        ],
        "correct": 0
    },
    {
        "question": "Что будет напечатано в результате выполнения следующего кода? arr = [[]] * 5; arr_1, arr_2 = arr, arr; for k, arr in enumerate((arr_1, arr_2)): arr[0].append(k); arr = (arr_1, 5, arr_2); print(arr)",
        "options": [
            "([0, 1], 5, [0, 1])",
            "([0], 5, [0])",
            "([1], 5, [1])",
            "Ошибка."
        ],
        "correct": 0
    },
    {
        "question": "Какие переменные среды, влияющие на поведение интерпретатора Python, вы знаете?",
        "options": [
            "PYTHONPATH, PYTHONDONTWRITEBYTECODE, PYTHONSTARTUP.",
            "PATH, HOME, USER.",
            "TEMP, TMP, USERPROFILE.",
            "LANG, LC_ALL, LC_MESSAGES."
        ],
        "correct": 0
    },
    {
        "question": "Что такое Cython?",
        "options": [
            "Язык программирования для увеличения производительности Python-кода.",
            "Интерпретатор Python.",
            "Библиотека для работы с данными.",
            "Фреймворк для веб-разработки."
        ],
        "correct": 0
    },
    {
        "question": "Как перевернуть генератор?",
        "options": [
            "Использовать функцию reversed() вместе с list().",
            "Использовать функцию reverse().",
            "Использовать функцию flip().",
            "Генераторы нельзя переворачивать."
        ],
        "correct": 0
    },
    {
        "question": "Приведите пример использования filter и reduce над итерируемым объектом.",
        "options": [
            "from functools import reduce; numbers = [1, 2, 3]; even_numbers = list(filter(lambda x: x % 2 == 0, numbers)); sum_of_numbers = reduce(lambda x, y: x + y, numbers).",
            "from itertools import filter; numbers = [1, 2, 3]; even_numbers = filter(lambda x: x % 2 == 0, numbers); sum_of_numbers = sum(numbers).",
            "from functools import map; numbers = [1, 2, 3]; even_numbers = list(map(lambda x: x % 2 == 0, numbers)); sum_of_numbers = sum(numbers).",
            "from collections import Counter; numbers = [1, 2, 3]; even_numbers = Counter(numbers); sum_of_numbers = sum(numbers)."
        ],
        "correct": 0
    },
    {
        "question": "Что будет напечатано в результате выполнения кода: print(_)?",
        "options": [
            "Ошибка.",
            "Объект генератора.",
            "Значение 5.",
            "Значение 0."
        ],
        "correct": 1
    },
    {
        "question": "Чем фреймворк отличается от библиотеки?",
        "options": [
            "Фреймворк предоставляет структуру и инструменты, а библиотека - это набор функций.",
            "Фреймворк - это набор функций, а библиотека предоставляет структуру.",
            "Фреймворк всегда бесплатен, а библиотека может быть платной.",
            "Фреймворк используется только для веб-разработки."
        ],
        "correct": 0
    },
    {
        "question": "Какой из следующих вариантов является наиболее эффективным?",
        "options": [
            "f1: O(n log n + n + m)",
            "f2: O(n + m log m + m)",
            "f3: O(n log n)",
            "Все функции имеют одинаковую сложность."
        ],
        "correct": 1
    },
    {
        "question": "Как бы вы начали отладку утечки памяти в рабочем приложении?",
        "options": [
            "Использовать Memory Profiler или objgraph.",
            "Перезапустить приложение.",
            "Удалить все временные файлы.",
            "Увеличить объем оперативной памяти."
        ],
        "correct": 0
    },
    {
        "question": "Когда возникает исключение NotImplementedError?",
        "options": [
            "Когда метод не реализован в подклассе.",
            "Когда происходит ошибка в коде.",
            "Когда вызывается неопределенная функция.",
            "Когда происходит деление на ноль."
        ],
        "correct": 0
    },
    {
        "question": "Что не так с этим кодом? if __debug__: assert False, ('error')",
        "options": [
            "Код всегда вызывает ошибку.",
            "Код не работает в режиме оптимизации.",
            "Код не имеет смысла.",
            "Код не вызывает ошибку."
        ],
        "correct": 1
    },
    {
        "question": "Что такое магические методы (dunder)?",
        "options": [
            "Специальные методы, которые начинаются и заканчиваются двоичным подчеркиванием.",
            "Методы, которые не могут быть переопределены.",
            "Методы, которые используются только в классах.",
            "Методы, которые не имеют аргументов."
        ],
        "correct": 0
    },
    {
        "question": "Почему возможно использовать __mangled в классе?",
        "options": [
            "Потому что Python использует name mangling для защиты атрибутов.",
            "Потому что это стандартный атрибут Python.",
            "Потому что это глобальная переменная.",
            "Потому что это встроенная функция."
        ],
        "correct": 0
    },
    {
        "question": "Что такое monkey patching?",
        "options": [
            "Техника изменения поведения кода во время выполнения.",
            "Метод оптимизации кода.",
            "Способ создания новых функций.",
            "Техника отладки кода."
        ],
        "correct": 0
    },
    {
        "question": "Как работать с транзитивными зависимостями?",
        "options": [
            "Использовать системы управления зависимостями, такие как pipenv или poetry.",
            "Игнорировать транзитивные зависимости.",
            "Устанавливать все зависимости вручную.",
            "Использовать только pip."
        ],
        "correct": 0
    },
    {
        "question": "Что будет напечатано в окне браузера при выполнении кода с <py-script>?",
        "options": [
            "__main__ и имя файла.",
            "Ошибка.",
            "Только имя файла.",
            "Только __main__."
        ],
        "correct": 0
    },
    {
        "question": "Какие новые функции добавлены в Python 3.10?",
        "options": [
            "Структурное сопоставление с шаблоном, улучшенные сообщения об ошибках.",
            "Поддержка многопоточности.",
            "Новые типы данных.",
            "Улучшенная производительность."
        ],
        "correct": 0
    },
    {
        "question": "Почему иногда Python так долго запускается (в Windows)?",
        "options": [
            "Из-за антивирусных программ и брандмауэров.",
            "Потому что Python всегда медленный.",
            "Из-за отсутствия библиотек.",
            "Из-за неправильного кода."
        ],
        "correct": 0
    },
    {
        "question": "Когда использование Python является 'правильным выбором' для проекта?",
        "options": [
            "Когда нужен быстрый прототип или доступ к библиотекам.",
            "Когда требуется высокая производительность.",
            "Когда нужно работать с низкоуровневыми ресурсами.",
            "Когда проект требует строгой типизации."
        ],
        "correct": 0
    },
    {
        "question": "Каковы некоторые недостатки языка Python?",
        "options": [
            "Низкая производительность и проблемы с многопоточностью.",
            "Отсутствие библиотек.",
            "Сложный синтаксис.",
            "Невозможность работы с большими данными."
        ],
        "correct": 0
    },
    {
        "question": "Что такое подводные камни Python?",
        "options": [
            "Проблемы с производительностью и многопоточностью.",
            "Отсутствие документации.",
            "Сложный синтаксис.",
            "Невозможность работы с библиотеками."
        ],
        "correct": 0
    },
    {
        "question": "Каковы основные различия между Python 2 и 3?",
        "options": [
            "Python 3 является более современным и поддерживаемым, с изменениями в синтаксисе и Unicode.",
            "Python 2 поддерживает только байты, а Python 3 - только строки.",
            "Python 2 имеет больше библиотек, чем Python 3.",
            "Python 3 не поддерживает старые версии библиотек."
        ],
        "correct": 0
    },
    {
        "question": "Какие ключевые отличия следует учитывать при написании кода на Python и Java?",
        "options": [
            "Python - интерпретируемый язык, Java - компилируемый.",
            "Python использует статическую типизацию, Java - динамическую.",
            "Python требует больше кода, чем Java.",
            "Java не поддерживает объектно-ориентированное программирование."
        ],
        "correct": 0
    },
    {
        "question": "Что такое метод?",
        "options": [
            "Функция, определенная внутри класса.",
            "Переменная, хранящая данные.",
            "Класс, который наследует другой класс.",
            "Функция, которая не имеет аргументов."
        ],
        "correct": 0
    },
    {
        "question": "Как вызвать метод, определенный в базовом классе, из производного класса?",
        "options": [
            "Использовать функцию super().",
            "Прямо вызвать метод родительского класса.",
            "Использовать ключевое слово base.",
            "Использовать метод call()."
        ],
        "correct": 0
    },
    {
        "question": "Как организовать код, чтобы упростить изменение базового класса?",
        "options": [
            "Использовать наследование.",
            "Использовать глобальные переменные.",
            "Изменять базовый класс напрямую.",
            "Создавать копии базового класса."
        ],
        "correct": 0
    },
    {
        "question": "Как узнать текущее имя модуля?",
        "options": [
            "Использовать переменную __name__.",
            "Использовать переменную name.",
            "Использовать функцию get_module_name().",
            "Использовать функцию current_module()."
        ],
        "correct": 0
    },
    {
        "question": "Как мне получить доступ к модулю, написанному на Python, из C?",
        "options": [
            "Использовать библиотеки ctypes или cffi.",
            "Использовать только C.",
            "Использовать только Python.",
            "Использовать Java."
        ],
        "correct": 0
    },
    {
        "question": "Как преобразовать число в строку?",
        "options": [
            "Использовать функцию str().",
            "Использовать функцию to_string().",
            "Использовать функцию convert().",
            "Использовать функцию format()."
        ],
        "correct": 0
    },
    {
        "question": "Как выполняется реализация словарей Python?",
        "options": [
            "Словари реализованы как хэш-таблицы.",
            "Словари реализованы как списки.",
            "Словари реализованы как массивы.",
            "Словари реализованы как деревья."
        ],
        "correct": 0
    },
    {
        "question": "Что используется для создания строки Unicode в Python?",
        "options": [
            "Префикс 'u' в Python 2, в Python 3 все строки по умолчанию являются Unicode.",
            "Префикс 'b'.",
            "Префикс 's'.",
            "Префикс 'str'."
        ],
        "correct": 0
    },
    {
        "question": "Какая встроенная функция используется в Python для перебора последовательности чисел?",
        "options": [
            "range().",
            "loop().",
            "iterate().",
            "for_each()."
        ],
        "correct": 0
    },
    {
        "question": "Есть ли в Python оператор switch-case?",
        "options": [
            "Нет, но есть оператор match-case в Python 3.10.",
            "Да, в Python 2.",
            "Да, в Python 3.",
            "Нет, это невозможно."
        ],
        "correct": 0
    },
    {
        "question": "Какой оператор можно использовать в Python, если оператор требуется синтаксически, но программа не требует никаких действий?",
        "options": [
            "pass.",
            "continue.",
            "break.",
            "return."
        ],
        "correct": 0
    },
    {
        "question": "Поддерживает ли Python регулярные выражения?",
        "options": [
            "Да, с помощью модуля re.",
            "Нет.",
            "Только в Python 3.",
            "Только в Python 2."
        ],
        "correct": 0
    },
    {
        "question": "Как вы выполняете сопоставление с образцом в Python?",
        "options": [
            "С помощью оператора if.",
            "С помощью оператора match.",
            "С помощью оператора switch.",
            "С помощью оператора case."
        ],
        "correct": 0
    },
    {
        "question": "Напишите регулярное выражение, которое будет принимать идентификатор электронной почты.",
        "options": [
            "r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'.",
            "r'\\w+@\\w+\\.\\w+'.",
            "r'\\d+@\\d+\\.\\d+'.",
            "r'\\s+@\\s+\\.\\s+'."
        ],
        "correct": 0
    },
    {
        "question": "Что такое сборка мусора?",
        "options": [
            "Автоматический процесс очистки памяти от неиспользуемых объектов.",
            "Процесс компиляции кода.",
            "Процесс отладки кода.",
            "Процесс оптимизации кода."
        ],
        "correct": 0
    },
    {
        "question": "Как в Python управляется память?",
        "options": [
            "Автоматически с помощью сборки мусора.",
            "Ручное управление памятью.",
            "С помощью статического выделения памяти.",
            "С помощью динамического выделения памяти."
        ],
        "correct": 0
    },
    {
        "question": "Почему не вся память освобождается при выходе из Python?",
        "options": [
            "Остаются ссылки на объекты.",
            "Python не освобождает память.",
            "Память освобождается только при завершении программы.",
            "Python не использует сборку мусора."
        ],
        "correct": 0
    },
    {
        "question": "Можно ли присвоить несколько переменных значениям в списке?",
        "options": [
            "Да, с помощью распаковки.",
            "Нет, это невозможно.",
            "Да, только для строк.",
            "Да, только для чисел."
        ],
        "correct": 0
    },
    {
        "question": "Объясните механизм передачи параметров в Python.",
        "options": [
            "Аргументы передаются по ссылке на объект.",
            "Аргументы передаются по значению.",
            "Аргументы передаются по ссылке и по значению.",
            "Ар гументы передаются только по значению."
        ],
        "correct": 0
    },
    {
        "question": "Что такое *args, **kwargs?",
        "options": [
            "Специальные параметры для передачи переменного количества аргументов.",
            "Типы данных в Python.",
            "Методы для работы с классами.",
            "Стандартные библиотеки Python."
        ],
        "correct": 0
    },
    {
        "question": "Как передать необязательные или ключевые параметры из одной функции в другую?",
        "options": [
            "Использовать *args и **kwargs.",
            "Использовать только *args.",
            "Использовать только **kwargs.",
            "Передавать параметры напрямую."
        ],
        "correct": 0
    },
    {
        "question": "Что такое лямбда? Что такое лямбда-функции?",
        "options": [
            "Анонимные функции, определенные с помощью ключевого слова lambda.",
            "Функции, которые не принимают аргументы.",
            "Функции, которые всегда возвращают значение.",
            "Функции, которые нельзя использовать в других функциях."
        ],
        "correct": 0
    },
    {
        "question": "Как вы создаете свой собственный пакет в Python?",
        "options": [
            "Создать директорию с init.py и метаданными в setup.py.",
            "Создать только один файл.",
            "Использовать только стандартные библиотеки.",
            "Создать пакет без структуры."
        ],
        "correct": 0
    },
    {
        "question": "Каковы основные различия между Python 2 и 3?",
        "options": [
            "Python 3 имеет улучшенный синтаксис и поддержку Unicode.",
            "Python 2 поддерживает только байты, а Python 3 - только строки.",
            "Python 2 имеет больше библиотек, чем Python 3.",
            "Python 3 не поддерживает старые версии библиотек."
        ],
        "correct": 0
    },
    {
        "question": "Чем фреймворк отличается от библиотеки?",
        "options": [
            "Фреймворк предоставляет структуру и инструменты, а библиотека - это набор функций.",
            "Фреймворк - это набор функций, а библиотека предоставляет структуру.",
            "Фреймворк всегда бесплатен, а библиотека может быть платной.",
            "Фреймворк используется только для веб-разработки."
        ],
        "correct": 0
    },
    {
        "question": "Что такое оператор with в Python?",
        "options": [
            "Оператор для управления контекстом, который автоматически управляет ресурсами.",
            "Оператор для создания функций.",
            "Оператор для работы с классами.",
            "Оператор для обработки исключений."
        ],
        "correct": 0
    },
    {
        "question": "Что такое исправление Monkey?",
        "options": [
            "Техника изменения поведения объектов или функций на лету.",
            "Метод оптимизации кода.",
            "Способ создания новых функций.",
            "Техника отладки кода."
        ],
        "correct": 0
    },
    {
        "question": "Что такое сериализация и десериализация?",
        "options": [
            "Процессы преобразования объектов в поток байтов и обратно.",
            "Процессы компиляции и интерпретации кода.",
            "Процессы сжатия и распаковки данных.",
            "Процессы шифрования и дешифрования данных."
        ],
        "correct": 0
    },
    {
        "question": "Что такое функции высшего порядка?",
        "options": [
            "Функции, которые принимают другие функции в качестве аргументов или возвращают функции.",
            "Функции, которые не имеют аргументов.",
            "Функции, которые могут быть вызваны только один раз.",
            "Функции, которые не возвращают значения."
        ],
        "correct": 0
    },
    {
        "question": "Как скопировать файл в Python?",
        "options": [
            "Использовать модуль shutil.",
            "Использовать модуль os.",
            "Использовать модуль copy.",
            "Использовать модуль file."
        ],
        "correct": 0
    },
    {
        "question": "Как скопировать объект в Python?",
        "options": [
            "Использовать метод copy() для поверхностной копии и deepcopy() для глубокой копии.",
            "Использовать только метод copy().",
            "Использовать только метод deepcopy().",
            "Копировать объекты невозможно."
        ],
        "correct": 0
    },
    {
        "question": "Объясните наследование в Python на примере.",
        "options": [
            "Создание нового класса на основе существующего класса.",
            "Создание класса без методов.",
            "Создание класса, который не наследует другие классы.",
            "Создание класса, который не имеет атрибутов."
        ],
        "correct": 0
    },
    {
        "question": "Что такое иерархическое наследование?",
        "options": [
            "Когда один класс наследует свойства и методы от одного родительского класса.",
            "Когда класс наследует свойства от нескольких классов.",
            "Когда класс не наследует ничего.",
            "Когда класс наследует только методы."
        ],
        "correct": 0
    },
    {
        "question": "Какие методы/функции мы используем для определения типа экземпляра и наследования?",
        "options": [
            "type() и isinstance().",
            "len() и count().",
            "append() и extend().",
            "add() и remove()."
        ],
        "correct": 0
    },
    {
        "question": "Напишите алгоритм сортировки числового набора данных на Python.",
        "options": [
            "Использовать встроенную функцию sorted() или метод sort().",
            "Использовать только циклы.",
            "Использовать только рекурсию.",
            "Сортировка невозможна."
        ],
        "correct": 0
    },
    {
        "question": "Как вы удалите последний объект из списка?",
        "options": [
            "Использовать метод pop().",
            "Использовать метод remove().",
            "Использовать метод delete().",
            "Использовать метод clear()."
        ],
        "correct": 0
    },
    {
        "question": "Что такое отрицательные индексы и для чего они используются?",
        "options": [
            "Индексы, считаемые с конца списка или строки.",
            "Индексы, которые всегда положительные.",
            "Индексы, которые используются только в кортежах.",
            "Индексы, которые не могут быть использованы в списках."
        ],
        "correct": 0
    },
    {
        "question": "Объясните методы split(), sub(), subn() модуля re в Python.",
        "options": [
            "Методы для работы с регулярными выражениями: split() - разделяет строку, sub() - заменяет совпадения, subn() - возвращает кортеж с заменами.",
            "Методы для работы с файлами.",
            "Методы для работы с числами.",
            "Методы для работы с датами."
        ],
        "correct": 0
    },
    {
        "question": "Что такое функция map в Python?",
        "options": [
            "Функция, которая применяет заданную функцию к каждому элементу последовательности.",
            "Функция, которая сортирует элементы.",
            "Функция, которая фильтрует элементы.",
            "Функция, которая объединяет два списка."
        ],
        "correct": 0
    },
    {
        "question": "Как получить индексы N максимальных значений в массиве NumPy?",
        "options": [
            "Использовать метод argsort().",
            "Использовать метод max().",
            "Использовать метод sort().",
            "Использовать метод find()."
        ],
        "correct": 0
    },
    {
        "question": "Что такое модуль Python?",
        "options": [
            "Файл, содержащий Python код с определенным функционалом.",
            "Класс, который содержит функции.",
            "Переменная, хранящая данные.",
            "Функция, которая выполняет операции."
        ],
        "correct": 0
    },
    {
        "question": "Назовите модули, связанные с файлами, в Python.",
        "options": [
            "os, sys, pathlib, io, shutil.",
            "math, random, datetime.",
            "json, xml, csv.",
            "requests, urllib, http."
        ],
        "correct": 0
    },
    {
        "question": "Сколько типов последовательностей поддерживает Python? Какие они?",
        "options": [
            "Три: строки, списки и кортежи.",
            "Два: строки и списки.",
            "Четыре: строки, списки, кортежи и множества.",
            "Один: только строки."
        ],
        "correct": 0
    },
    {
        "question": "Как отобразить содержимое текстового файла в обратном порядке?",
        "options": [
            "Использовать метод reversed() и цикл for.",
            "Использовать метод sort().",
            "Использовать метод reverse().",
            "Использовать метод flip()."
        ],
        "correct": 0
    },
    {
        "question": "В чем разница между NumPy и SciPy?",
        "options": [
            "NumPy - для работы с массивами, SciPy - для научных вычислений.",
            "NumPy - для научных вычислений, SciPy - для работы с массивами.",
            "Обе библиотеки одинаковы.",
            "NumPy - это библиотека для Java."
        ],
        "correct": 0
    },
    {
        "question": "Что такое лямбда-функции?",
        "options": [
            "Анонимные функции, определенные с помощью ключевого слова lambda.",
            "Функции, которые не принимают аргументы.",
            "Функции, которые всегда возвращают значение.",
            "Функции, которые нельзя использовать в других функциях."
        ],
        "correct": 0
    },
    {
        "question": "Как вы создаете свой собственный пакет в Python?",
        "options": [
            "Создать директорию с init.py и метаданными в setup.py.",
            "Создать только один файл.",
            "Использовать только стандартные библиотеки.",
            "Создать пакет без структуры."
        ],
        "correct": 0
    },
    {
        "question": "Какой оператор используется для работы с контекстными менеджерами?",
        "options": [
            "with.",
            "for.",
            "if.",
            "try."
        ],
        "correct": 0
    },
    {
        "question": "Что такое monkey patching?",
        "options": [
            "Техника изменения поведения объектов или функций на лету.",
            "Метод оптимизации кода.",
            "Способ создания новых функций.",
            "Техника отладки кода."
        ],
        "correct": 0
    },
    {
        "question": "Как работает сборка мусора в Python?",
        "options": [
            "Автоматически освобождает память от неиспользуемых объектов.",
            "Требует ручного управления памятью.",
            "Не освобождает память.",
            "Освобождает память только при завершении программы."
        ],
        "correct": 0
    },
    {
        "question": "Какой метод используется для копирования файла в Python?",
        "options": [
            "shutil.copy().",
            "os.copy().",
            "file.copy().",
            "copy.copy()."
        ],
        "correct": 0
    },
    {
        "question": "Какой метод используется для копирования объекта в Python?",
        "options": [
            "copy() и deepcopy().",
            "clone().",
            "duplicate().",
            "replicate()."
        ],
        "correct": 0
    },
    {
        "question": "Что такое метод?",
        "options": [
            "Функция, определенная внутри класса.",
            "Переменная, хранящая данные.",
            "Класс, который наследует другой класс.",
            "Функция, которая не имеет аргументов."
        ],
        "correct": 0
    },
    {
        "question": "Как вызвать метод, определенный в базовом классе, из производного класса?",
        "options": [
            "Использовать функцию super().",
            "Прямо вызвать метод родительского класса.",
            "Использовать ключевое слово base.",
            "Использовать метод call()."
        ],
        "correct": 0
    },
    {
        "question": "Что такое функция map в Python?",
        "options": [
            "Функция, которая применяет заданную функцию к каждому элементу последовательности.",
            "Функция, которая сортирует элементы.",
            "Функция, которая фильтрует элементы.",
            "Функция, которая объединяет два списка."
        ],
        "correct": 0
    },
    {
        "question": "Как получить индексы N максимальных значений в массиве NumPy?",
        "options": [
            "Использовать метод argsort().",
            "Использовать метод max().",
            "Использовать метод sort().",
            "Использовать метод find()."
        ],
        "correct": 0
    },
    {
        "question": "Что такое модуль Python?",
        "options": [
            "Файл, содержащий Python код с определенным функционалом.",
            "Класс, который содержит функции.",
            "Переменная, хранящая данные.",
            "Функция, которая выполняет операции."
        ],
        "correct": 0
    },
    {
        "question": "Назовите модули, связанные с файлами, в Python.",
        "options": [
            "os, sys, pathlib, io, shutil.",
            "math, random, datetime.",
            "json, xml, csv.",
            "requests, urllib, http."
        ],
        "correct": 0
    },
    {
        "question": "Сколько типов последовательностей поддерживает Python? Какие они?",
        "options": [
            "Три: строки, списки и кортежи.",
            "Два: строки и списки.",
            "Четыре: строки, списки, кортежи и множества.",
            "Один: только строки."
        ],
        "correct": 0
    },
    {
        "question": "Как отобразить содержимое текстового файла в обратном порядке?",
        "options": [
            "Использовать метод reversed() и цикл for.",
            "Использовать метод sort().",
            "Использовать метод reverse().",
            "Использовать метод flip()."
        ],
        "correct": 0
    },
    {
        "question": "В чем разница между NumPy и SciPy?",
        "options": [
            "NumPy - для работы с массивами, SciPy - для научных вычислений.",
            "NumPy - для научных вычислений, SciPy - для работы с массивами.",
            "Обе библиотеки одинаковы.",
            "NumPy - это библиотека для Java."
        ],
        "correct": 0
    },
    {
        "question": "Что такое лямбда-функции?",
        "options": [
            "Анонимные функции, определенные с помощью ключевого слова lambda.",
            "Функции, которые не принимают аргументы.",
            "Функции, которые всегда возвращают значение.",
            "Функции, которые нельзя использовать в других функциях."
        ],
        "correct": 0
    },
    {
        "question": "Как вы создаете свой собственный пакет в Python?",
        "options": [
            "Создать директорию с init.py и метаданными в setup.py.",
            "Создать только один файл.",
            "Использовать только стандартные библиотеки.",
            "Создать пакет без структуры."
        ],
        "correct": 0
    },
    {
        "question": "Какой оператор используется для работы с контекстными менеджерами?",
        "options": [
            "with.",
            "for.",
            "if.",
            "try."
        ],
        "correct": 0
    },
    {
        "question": "Что такое monkey patching?",
        "options": [
            "Техника изменения поведения объектов или функций на лету.",
            "Метод оптимизации кода.",
            "Способ создания новых функций.",
            "Техника отладки кода."
        ],
        "correct": 0
    },
    {
        "question": "Как работает сборка мусора в Python?",
        "options": [
            "Автоматически освобождает память от неиспользуемых объектов.",
            "Требует ручного управления памятью.",
            "Не освобождает память.",
            "Освобождает память только при завершении программы."
        ],
        "correct": 0
    },
    {
        "question": "Какой метод используется для копирования файла в Python?",
        "options": [
            "shutil.copy().",
            "os.copy().",
            "file.copy().",
            "copy.copy()."
        ],
        "correct": 0
    },
    {
        "question": "Какой метод используется для копирования объекта в Python?",
        "options": [
            "copy() и deepcopy().",
            "clone().",
            "duplicate().",
            "replicate()."
        ],
        "correct": 0
    },
    {
        "question": "Что такое метод?",
        "options": [
            "Функция, определенная внутри класса.",
            "Переменная, хранящая данные.",
            "Класс, который наследует другой класс.",
            "Функция, которая не имеет аргументов."
        ],
        "correct": 0
    },
    {
        "question": "Как вызвать метод, определенный в базовом классе, из производного класса?",
        "options": [
            "Использовать функцию super().",
            "Прямо вызвать метод родительского класса.",
            "Использовать ключевое слово base.",
            "Использовать метод call()."
        ],
        "correct": 0
    },
    {
        "question": "Что такое объектно-ориентированное программирование?",
        "options": [
            "Методология программирования, основанная на концепции объектов.",
            "Методология программирования, основанная на функциях.",
            "Методология программирования, основанная на процедурах.",
            "Методология программирования, основанная на алгоритмах."
        ],
        "correct": 0
    },
    {
        "question": "Каковы ключевые особенности Python?",
        "options": [
            "Простой синтаксис, интерпретируемый, кросс-платформенность.",
            "Только статическая типизация.",
            "Только компилируемый язык.",
            "Только для научных вычислений."
        ],
        "correct": 0
    },
    {
        "question": "Что такое тернарный оператор в Python?",
        "options": [
            "Синтаксис для написания условных выражений в одну строку.",
            "Оператор для работы с циклами.",
            "Оператор для работы с функциями.",
            "Оператор для работы с классами."
        ],
        "correct": 0
    },
    {
        "question": "Что такое многопоточность?",
        "options": [
            "Возможность выполнять несколько потоков исполнения одновременно.",
            "Возможность выполнять несколько процессов одновременно.",
            "Возможность выполнять код асинхронно.",
            "Возможность выполнять код синхронно."
        ],
        "correct": 0
    },
    {
        "question": "Расскажите о функциях help() и dir() в Python.",
        "options": [
            "Функция help() предоставляет помощь о любом объекте, а dir() возвращает список атрибутов и методов.",
            "Обе функции используются для работы с файлами.",
            "Обе функции используются для работы с числами.",
            "Обе функции используются для работы с строками."
        ],
        "correct": 0
 },
 {
    "question": "Что такое словарь в Python?",
    "options": [
        "Структура данных, которая хранит пары 'ключ-значение'.",
        "Структура данных, которая хранит только уникальные элементы.",
        "Структура данных, которая хранит только числа.",
        "Структура данных, которая хранит только строки."
    ],
    "correct": 0
},
{
    "question": "Как получить список всех ключей словаря?",
    "options": [
        "Использовать метод keys().",
        "Использовать метод values().",
        "Использовать метод items().",
        "Использовать метод get()."
    ],
    "correct": 0
},
{
    "question": "Напишите логику Python для подсчета количества заглавных букв в файле.",
    "options": [
        "Использовать метод isupper() для каждого символа в строке.",
        "Использовать метод islower() для каждого символа в строке.",
        "Использовать метод count() для подсчета заглавных букв.",
        "Использовать метод upper() для преобразования строки."
    ],
    "correct": 0
},
{
    "question": "Как бы вы рандомизировали содержимое списка на месте?",
    "options": [
        "Использовать random.shuffle().",
        "Использовать random.sample().",
        "Использовать random.choice().",
        "Использовать random.random()."
    ],
    "correct": 0
},
{
    "question": "Объясните join() и split() в Python.",
    "options": [
        "join() соединяет элементы в строку, split() разбивает строку на элементы.",
        "join() разбивает строку, split() соединяет элементы.",
        "join() используется для работы с файлами, split() - для работы с числами.",
        "join() и split() - это методы для работы с графикой."
    ],
    "correct": 0
},
{
    "question": "Является ли Python чувствительным к регистру?",
    "options": [
        "Да, Python чувствителен к регистру.",
        "Нет, Python не чувствителен к регистру.",
        "Только в строках.",
        "Только в переменных."
    ],
    "correct": 0
},
{
    "question": "Как удалить начальный пробел в строке?",
    "options": [
        "Использовать метод lstrip().",
        "Использовать метод strip().",
        "Использовать метод rstrip().",
        "Использовать метод remove()."
    ],
    "correct": 0
},
{
    "question": "Что такое оператор pass в Python?",
    "options": [
        "Пустой оператор, который не выполняет никаких действий.",
        "Оператор для завершения цикла.",
        "Оператор для выхода из функции.",
        "Оператор для обработки исключений."
    ],
    "correct": 0
},
{
    "question": "Что такое замыкание в Python?",
    "options": [
        "Функция, которая сохраняет доступ к переменным из внешней области видимости.",
        "Функция, которая не имеет аргументов.",
        "Функция, которая возвращает другую функцию.",
        "Функция, которая не может быть вызвана."
    ],
    "correct": 0
},
{
    "question": "Объясните операторы //, % и ** в Python.",
    "options": [
        "// - целочисленное деление, % - остаток от деления, ** - возведение в степень.",
        "// - обычное деление, % - деление, ** - умножение.",
        "// - возведение в степень, % - деление, ** - остаток от деления.",
        "// - умножение, % - деление, ** - сложение."
    ],
    "correct": 0
},
{
    "question": "Сколько видов операторов есть в Python?",
    "options": [
        "Много, включая арифметические, логические и операторы сравнения.",
        "Только арифметические.",
        "Только логические.",
        "Только операторы сравнения."
    ],
    "correct": 0
},
{
    "question": "Объясните операторы сравнения (отношения) в Python.",
    "options": [
        "Операторы для сравнения значений, возвращающие True или False.",
        "Операторы для выполнения арифметических операций.",
        "Операторы для работы с логическими значениями.",
        "Операторы для работы с строками."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для получения длины списка?",
    "options": [
        "len().",
        "size().",
        "length().",
        "count()."
    ],
    "correct": 0
},
{
    "question": "Какой оператор используется для проверки равенства в Python?",
    "options": [
        "==.",
        "===",
        "!=",
        "is."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для добавления элемента в конец списка?",
    "options": [
        "append().",
        "add().",
        "insert().",
        "extend()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для удаления элемента из списка по значению?",
    "options": [
        "remove().",
        "delete().",
        "pop().",
        "discard()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для сортировки списка?",
    "options": [
        "sort().",
        "order().",
        "arrange().",
        "sorted()."
    ],
    "correct": 0
},
{
    "question": "Что такое словарь в Python?",
    "options": [
        "Структура данных, которая хранит пары 'ключ-значение'.",
        "Структура данных, которая хранит только уникальные элементы.",
        "Структура данных, которая хранит только числа.",
        "Структура данных, которая хранит только строки."
    ],
    "correct": 0
},
{
    "question": "Как получить список всех ключей словаря?",
    "options": [
        "Использовать метод keys().",
        "Использовать метод values().",
        "Использовать метод items().",
        "Использовать метод get()."
    ],
    "correct": 0
},
{
    "question": "Как получить индексы N максимальных значений в массиве NumPy?",
    "options": [
        "Использовать метод argsort().",
        "Использовать метод max().",
        "Использовать метод sort().",
        "Использовать метод find()."
    ],
    "correct": 0
},
{
    "question": "Что такое функция map в Python?",
    "options": [
        "Функция, которая применяет заданную функцию к каждому элементу последовательности.",
        "Функция, которая сортирует элементы.",
        "Функция, которая фильтрует элементы.",
        "Функция, которая объединяет два списка."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для копирования файла в Python?",
    "options": [
        "shutil.copy().",
        "os.copy().",
        "file.copy().",
        "copy.copy()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для копирования объекта в Python?",
    "options": [
        "copy() и deepcopy().",
        "clone().",
        "duplicate().",
        "replicate()."
    ],
    "correct": 0
},
{
    "question": "Что такое метод?",
    "options": [
        "Функция, определенная внутри класса.",
        "Переменная, хранящая данные.",
        "Класс, который наследует другой класс.",
        "Функция, которая не имеет аргументов."
    ],
    "correct": 0
},
{
    "question": "Как вызвать метод, определенный в базовом классе, из производного класса?",
    "options": [
        "Использовать функцию super().",
        "Прямо вызвать метод родительского класса.",
        "Использовать ключевое слово base.",
        "Использовать метод call()."
    ],
    "correct": 0
},
{
    "question": "Как организовать код, чтобы упростить изменение базового класса?",
    "options": [
        "Использовать наследование.",
        "Использовать глобальные переменные.",
        "Изменять базовый класс напрямую.",
        "Создавать копии базового класса."
    ],
    "correct": 0
},
{
    "question": "Как узнать текущее имя модуля?",
    "options": [
        "Использовать переменную __name__.",
        "Использовать переменную name.",
        "Использовать функцию get_module_name().",
        "Использовать функцию current_module()."
    ],
    "correct": 0
},
{
    "question": "Как мне получить доступ к модулю, написанному на Python, из C?",
    "options": [
        "Использовать библиотеки ctypes или cffi.",
        "Использовать только C.",
        "Использовать только Python.",
        "Использовать Java."
    ],
    "correct": 0
},
{
    "question": "Как преобразовать число в строку?",
    "options": [
        "Использовать функцию str().",
        "Использовать функцию to_string().",
        "Использовать функцию convert().",
        "Использовать функцию format()."
    ],
    "correct": 0
},
{
    "question": "Как выполняется реализация словарей Python?",
    "options": [
        "Словари реализованы как хэш-таблицы.",
        "Словари реализованы как списки.",
        "Словари реализованы как массивы.",
        "Словари реализованы как деревья."
    ],
    "correct": 0
},
{
    "question": "Что используется для создания строки Unicode в Python?",
    "options": [
        "Префикс 'u' в Python 2, в Python 3 все строки по умолчанию являются Unicode.",
        "Префикс 'b'.",
        "Префикс 's'.",
        "Префикс 'str'."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для перебора последовательности чисел?",
    "options": [
        "range().",
        "loop().",
        "iterate().",
        "for_each()."
    ],
    "correct": 0
},
{
    "question": "Есть ли в Python оператор switch-case?",
    "options": [
        "Нет, но есть оператор match-case в Python 3.10.",
        "Да, в Python 2.",
        "Да, в Python 3.",
        "Нет, это невозможно."
    ],
    "correct": 0
},
{
    "question": "Какой оператор можно использовать в Python, если оператор требуется синтаксически, но программа не требует никаких действий?",
    "options": [
        "pass.",
        "continue.",
        "break.",
        "return."
    ],
    "correct": 0
},
{
    "question": "Поддерживает ли Python регулярные выражения?",
    "options": [
        "Да, с помощью модуля re.",
        "Нет.",
        "Только в Python 3.",
        "Только в Python 2."
    ],
    "correct": 0
},
{
    "question": "Как вы выполняете сопоставление с образцом в Python?",
    "options": [
        "С помощью оператора if.",
        "С помощью оператора match.",
        "С помощью оператора switch.",
        "С помощью оператора case."
    ],
    "correct": 0
},
{
    "question": "Напишите регулярное выражение, которое будет принимать идентификатор электронной почты.",
    "options": [
        "r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'.",
        "r'\\w+@\\w+\\.\\w+'.",
        "r'\\d+@\\d+\\.\\d+'.",
        "r'\\s+@\\s+\\.\\s+'."
    ],
    "correct": 0
},
{
    "question": "Что такое сборка мусора?",
    "options": [
        "Автоматический процесс очистки памяти от неиспользуемых объектов.",
        "Процесс компиляции кода.",
        "Процесс отладки кода.",
        "Процесс оптимизации кода."
    ],
    "correct": 0
},
{
    "question": "Как в Python управляется память?",
    "options": [
        "Автоматически с помощью сборки мусора.",
        "Ручное управление памятью.",
        "С помощью статического выделения памяти.",
        "С помощью динамического выделения памяти."
    ],
    "correct": 0
},
{
    "question": "Почему не вся память освобождается при выходе из Python?",
    "options": [
        "Остаются ссылки на объекты.",
        "Python не освобождает память.",
        "Память освобождается только при завершении программы.",
        "Python не использует сборку мусора."
    ],
    "correct": 0
},
{
    "question": "Можно ли присвоить несколько переменных значениям в списке?",
    "options": [
        "Да, с помощью распаковки.",
        "Нет, это невозможно.",
        "Да, только для строк.",
        "Да, только для чисел."
    ],
    "correct": 0
},

{
    "question": "Какой метод используется для получения уникальных значений из списка?",
    "options": [
        "set().",
        "unique().",
        "distinct().",
        "filter()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для объединения двух списков?",
    "options": [
        "extend().",
        "combine().",
        "merge().",
        "join()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для получения индекса элемента в списке?",
    "options": [
        "index().",
        "find().",
        "search().",
        "locate()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для удаления всех элементов из списка?",
    "options": [
        "clear().",
        "remove_all().",
        "delete().",
        "empty()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для вставки элемента в список по индексу?",
    "options": [
        "insert().",
        "add().",
        "append().",
        "put()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для получения первого элемента списка?",
    "options": [
        "first().",
        "head().",
        "get().",
        "index(0)."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для проверки, пуст ли список?",
    "options": [
        "len() == 0.",
        "is_empty().",
        "check_empty().",
        "size() == 0."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для сортировки списка?",
    "options": [
        "sort().",
        "order().",
        "arrange().",
        "sorted()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для получения последнего элемента списка?",
    "options": [
        "last().",
        "tail().",
        "get_last().",
        "index(-1)."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для проверки наличия элемента в списке?",
    "options": [
        "in.",
        "exists().",
        "contains().",
        "has()."
    ],
    "correct": 0
},
{
    "question": "Что такое распаковка кортежа?",
    "options": [
        "Процесс извлечения элементов кортежа и присваивания их переменным.",
        "Процесс создания кортежа из списка.",
        "Процесс преобразования кортежа в строку.",
        "Процесс объединения нескольких кортежей."
    ],
    "correct": 0
},
{
    "question": "Что такое slice (срез)?",
    "options": [
        "Метод, позволяющий получить часть списка, кортежа или строки.",
        "Метод, позволяющий объединить строки.",
        "Метод, позволяющий сортировать элементы.",
        "Метод, позволяющий фильтровать элементы."
    ],
    "correct": 0
},
{
    "question": "Что такое именованный кортеж?",
    "options": [
        "Структура данных, похожая на кортеж, но с доступом по имени.",
        "Кортеж, который не может изменяться.",
        "Кортеж, который содержит только уникальные элементы.",
        "Кортеж, который может содержать только числа."
    ],
    "correct": 0
},
{
    "question": "Как бы вы преобразовали строку в целое число в Python?",
    "options": [
        "Использовать функцию int().",
        "Использовать функцию str().",
        "Использовать функцию float().",
        "Использовать функцию convert()."
    ],
    "correct": 0
},
{
    "question": "Как вы вводите данные в Python?",
    "options": [
        "С помощью функции input().",
        "С помощью функции read().",
        "С помощью функции get().",
        "С помощью функции scan()."
    ],
    "correct": 0
},
{
    "question": "Что такое замороженный набор в Python?",
    "options": [
        "Неизменяемая версия набора.",
        "Изменяемая версия набора.",
        "Структура данных, которая хранит только уникальные элементы.",
        "Структура данных, которая может содержать только числа."
    ],
    "correct": 0
},
{
    "question": "Как бы вы сгенерировали случайное число в Python?",
    "options": [
        "Использовать модуль random.",
        "Использовать модуль math.",
        "Использовать модуль statistics.",
        "Использовать модуль os."
    ],
    "correct": 0
},
{
    "question": "Как сделать заглавной первую букву строки?",
    "options": [
        "Использовать метод capitalize().",
        "Использовать метод title().",
        "Использовать метод upper().",
        "Использовать метод first()."
    ],
    "correct": 0
},
{
    "question": "Как проверить, все ли символы в строке буквенно-цифровые?",
    "options": [
        "Использовать метод isalnum().",
        "Использовать метод isalpha().",
        "Использовать метод isdigit().",
        "Использовать метод isalnumstr()."
    ],
    "correct": 0
},
{
    "question": "Что такое конкатенация?",
    "options": [
        "Объединение двух или более строк в одну.",
        "Разделение строки на подстроки.",
        "Изменение регистра строки.",
        "Преобразование строки в список."
    ],
    "correct": 0
},
{
    "question": "Что такое функция?",
    "options": [
        "Блок кода, который выполняет определенную задачу при вызове.",
        "Переменная, хранящая данные.",
        "Класс, который наследует другой класс.",
        "Метод, который не возвращает значения."
    ],
    "correct": 0
},
{
    "question": "Что такое рекурсия?",
    "options": [
        "Процесс вызова функции изнутри самой функции.",
        "Процесс выполнения функции один раз.",
        "Процесс создания функции.",
        "Процесс удаления функции."
    ],
    "correct": 0
},
{
    "question": "Что делает функция zip()?",
    "options": [
        "Сопоставляет элементы нескольких списков.",
        "Сортирует элементы списка.",
        "Фильтрует элементы списка.",
        "Объединяет строки."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для получения длины строки в Python?",
    "options": [
        "len().",
        "length().",
        "size().",
        "count()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для преобразования строки в нижний регистр?",
    "options": [
        "lower().",
        "downcase().",
        "tolower().",
        "make_lower()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для удаления пробелов в начале и конце строки?",
    "options": [
        "strip().",
        "trim().",
        "remove_spaces().",
        "clear()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для замены подстроки в строке?",
    "options": [
        "replace().",
        "substitute().",
        "change().",
        "modify()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для проверки, начинается ли строка с определенной подстроки?",
    "options": [
        "startswith().",
        "beginswith().",
        "starts().",
        "isstart()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для проверки, заканчивается ли строка на определенную подстроку?",
    "options": [
        "endswith().",
        "finishwith().",
        "ends().",
        "isend()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для разбивки строки на список подстрок?",
    "options": [
        "split().",
        "divide().",
        "break().",
        "cut()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для получения символа по индексу в строке?",
    "options": [
        "index().",
        "charAt().",
        "get().",
        "retrieve()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для проверки, является ли строка пустой?",
    "options": [
        "len() == 0.",
        "is_empty().",
        "check_empty().",
        "size() == 0."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для преобразования строки в верхний регистр?",
    "options": [
        "upper().",
        "toupper().",
        "make_upper().",
        "capitalize()."
    ],
    "correct": 0
},
{
    "question": "Что такое распаковка кортежа?",
    "options": [
        "Процесс извлечения элементов кортежа и присваивания их переменным.",
        "Процесс создания кортежа из списка.",
        "Процесс преобразования кортежа в строку.",
        "Процесс объединения нескольких кортежей."
    ],
    "correct": 0
},
{
    "question": "Что такое slice (срез)?",
    "options": [
        "Метод, позволяющий получить часть списка, кортежа или строки.",
        "Метод, позволяющий объединить строки.",
        "Метод, позволяющий сортировать элементы.",
        "Метод, позволяющий фильтровать элементы."
    ],
    "correct": 0
},
{
    "question": "Что такое именованный кортеж?",
    "options": [
        "Структура данных, похожая на кортеж, но с доступом по имени.",
        "Кортеж, который не может изменяться.",
        "Кортеж, который содержит только уникальные элементы.",
        "Кортеж, который может содержать только числа."
    ],
    "correct": 0
},
{
    "question": "Как бы вы преобразовали строку в целое число в Python?",
    "options": [
        "Использовать функцию int().",
        "Использовать функцию str().",
        "Использовать функцию float().",
        "Использовать функцию convert()."
    ],
    "correct": 0
},
{
    "question": "Как вы вводите данные в Python?",
    "options": [
        "С помощью функции input().",
        "С помощью функции read().",
        "С помощью функции get().",
        "С помощью функции scan()."
    ],
    "correct": 0
},
{
    "question": "Что такое замороженный набор в Python?",
    "options": [
        "Неизменяемая версия набора.",
        "Изменяемая версия набора.",
        "Структура данных, которая хранит только уникальные элементы.",
        "Структура данных, которая может содержать только числа."
    ],
    "correct": 0
},
{
    "question": "Как бы вы сгенерировали случайное число в Python?",
    "options": [
        "Для генерации случайных чисел можно использовать модуль random.",
        "Для генерации случайных чисел можно использовать модуль math.",
        "Для генерации случайных чисел можно использовать модуль statistics.",
        "Для генерации случайных чисел можно использовать модуль os."
    ],
    "correct": 0
},
{
    "question": "Как сделать заглавной первую букву строки?",
    "options": [
        "Использовать метод capitalize().",
        "Использовать метод title().",
        "Использовать метод upper().",
        "Использовать метод first()."
    ],
    "correct": 0
},
{
    "question": "Как проверить, все ли символы в строке буквенно-цифровые?",
    "options": [
        "Использовать метод isalnum().",
        "Использовать метод isalpha().",
        "Использовать метод isdigit().",
        "Использовать метод isalnumstr()."
    ],
    "correct": 0
},
{
    "question": "Что такое конкатенация?",
    "options": [
        "Объединение двух или более строк в одну.",
        "Разделение строки на подстроки.",
        "Изменение регистра строки.",
        "Преобразование строки в список."
    ],
    "correct": 0
},
{
    "question": "Что такое функция?",
    "options": [
        "Блок кода, который выполняет определенную задачу при вызове.",
        "Переменная, хранящая данные.",
        "Класс, который наследует другой класс.",
        "Метод, который не возвращает значения."
    ],
    "correct": 0
},
{
    "question": "Что такое рекурсия?",
    "options": [
        "Процесс вызова функции изнутри самой функции.",
        "Процесс выполнения функции один раз.",
        "Процесс создания функции.",
        "Процесс удаления функции."
    ],
    "correct": 0
},
{
    "question": "Что делает функция zip()?",
    "options": [
        "Сопоставляет элементы нескольких списков.",
        "Сортирует элементы списка.",
        "Фильтрует элементы списка.",
        "Объединяет строки."
    ],

    "correct": 0
},
{
    "question": "Какой метод используется для получения длины строки в Python?",
    "options": [
        "len().",
        "length().",
        "size().",
        "count()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для преобразования строки в нижний регистр?",
    "options": [
        "lower().",
        "downcase().",
        "tolower().",
        "make_lower()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для удаления пробелов в начале и конце строки?",
    "options": [
        "strip().",
        "trim().",
        "remove_spaces().",
        "clear()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для замены подстроки в строке?",
    "options": [
        "replace().",
        "substitute().",
        "change().",
        "modify()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для проверки, начинается ли строка с определенной подстроки?",
    "options": [
        "startswith().",
        "beginswith().",
        "starts().",
        "isstart()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для проверки, заканчивается ли строка на определенную подстроку?",
    "options": [
        "endswith().",
        "finishwith().",
        "ends().",
        "isend()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для разбивки строки на список подстрок?",
    "options": [
        "split().",
        "divide().",
        "break().",
        "cut()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для получения символа по индексу в строке?",
    "options": [
        "index().",
        "charAt().",
        "get().",
        "retrieve()."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для проверки, является ли строка пустой?",
    "options": [
        "len() == 0.",
        "is_empty().",
        "check_empty().",
        "size() == 0."
    ],
    "correct": 0
},
{
    "question": "Какой метод используется для преобразования строки в верхний регистр?",
    "options": [
        "upper().",
        "toupper().",
        "make_upper().",
        "capitalize()."
    ],
    "correct": 0
},
{
    "question": "Перечислите некоторые команды pdb.",
    "options": [
        "break или b: установить точку останова",
        "continue или c: продолжить выполнение до следующей точки останова",
        "step или s: шаг в код",
        "next или n: проитись по коду",
        "return или r: продолжить выполнение, пока текущая функция не вернется"
    ],
    "correct": 0
},
{
    "question": "Какую команду мы используем для отладки программы Python?",
    "options": [
        "pdb",
        "debug",
        "traceback",
        "logging"
    ],
    "correct": 0
},
{
    "question": "Что такое счетчик в Python?",
    "options": [
        "Подкласс словаря в Python, специально разработанный для подсчета хешируемых объектов",
        "Класс, который позволяет подсчитывать элементы в последовательностях",
        "Функция, которая возвращает количество элементов в списке",
        "Модуль, который позволяет работать с числами"
    ],
    "correct": 0
},
{
    "question": "Как бы вы создали пустой массив NumPy?",
    "options": [
        "Используя функцию numpy.empty()",
        "Используя функцию numpy.zeros()",
        "Используя функцию numpy.ones()",
        "Используя функцию numpy.full()"
    ],
    "correct": 0
},
{
    "question": "Объясните использование ключевого слова «нелокальный» (nonlocal) в Python.",
    "options": [
        "Ключевое слово, которое позволяет доступ к переменным, определенным в вызывающей функции из вложенной функции",
        "Ключевое слово, которое позволяет изменять значения переменных в глобальной области видимости",
        "Ключевое слово, которое позволяет создавать локальные переменные",
        "Ключевое слово, которое позволяет удалять переменные"
    ],
    "correct": 0
},
{
    "question": "Что такое глобальное ключевое слово?",
    "options": [
        "Ключевое слово, которое позволяет определить переменные в глобальной области видимости",
        "Ключевое слово, которое позволяет изменять значения переменных в глобальной области видимости",
        "Ключевое слово, которое позволяет создавать локальные переменные",
        "Ключевое слово, которое позволяет удалять переменные"
    ],
    "correct": 0
},
{
    "question": "Как бы вы сделали скрипт Python исполняемым в Unix?",
    "options": [
        "Добавив шебанг в начало скрипта",
        "Используя команду chmod для изменения прав доступа",
        "Используя команду chown для изменения владельца файла",
        "Используя команду chgrp для изменения группы файла"
    ],
    "correct": 0
},
{
    "question": "Какие функции или методы вы будете использовать для удаления файла в Python?",
    "options": [
        "os.remove()",
        "os.unlink()",
        "shutil.rmtree()",
        "os.rmdir()"
    ],
    "correct": 0
},
{
    "question": "Что такое аксессоры, мутаторы и @property?",
    "options": [
        "Методы, которые используются для доступа и изменения значения свойства объекта",
        "Функции, которые возвращают значение свойства объекта",
        "Классы, которые наследуют от другого класса",
        "Модули, которые импортируют другие модули"
    ],
    "correct": 0
},
{
    "question": "Различайте методы append() и extend() списка.",
    "options": [
        "append() добавляет элемент в конец списка, extend() добавляет элементы из другого списка в конец текущего списка",
        "append() добавляет элементы из другого списка в конец текущего списка, extend() добавляет элемент в конец списка",
        "append() и extend() добавляют элементы в конец списка",
        "append() и extend() удаляют элементы из списка"
    ],
    "correct": 0
}






    

    
    
    
]]